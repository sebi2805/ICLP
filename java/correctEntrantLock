import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Main {
    private final Lock lock1 = new ReentrantLock();
    private final Lock lock2 = new ReentrantLock();

    private void method1() throws InterruptedException {
        while(true) {
            if (lock1.tryLock()) {
                try {
                    System.out.println("Locked obj1 in method1");
                    if (lock2.tryLock()) {
                        try {
                            System.out.println("Locked obj2 in method1");
                            break;
                        } finally {
                            lock2.unlock();
                        }
                    }
                } finally {
                    lock1.unlock();
                }
            }
            Thread.sleep(400);
        }
    }

    private void method2() throws InterruptedException {
        while(true) {
            if (lock2.tryLock()) {
                try {
                    System.out.println("Locked obj2 in method2");
                    if (lock1.tryLock()) {
                        try {
                            System.out.println("Locked obj1 in method2");
                            break;
                        } finally {
                            lock1.unlock();
                        }
                    }
                } finally {
                    lock2.unlock();
                }
            }
            Thread.sleep(1000);
        }
    }

    public static void main(String[] args) {
        Main m = new Main();
        Thread t1 = new Thread(() -> {
            try {
                m.method1();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        });

        Thread t2 = new Thread(() -> {
            try {
                m.method2();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            System.out.println(e.getMessage());
        }
    }
}
