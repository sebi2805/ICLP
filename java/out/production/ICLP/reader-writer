import java.util.concurrent.locks.ReentrantReadWriteLock;

class SharedResource {
    private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
    private String data = "Initial data";

    // Metodă pentru cititori
    public void readData(String readerName) {
        rwLock.readLock().lock(); // Obține read lock
        try {
            System.out.println(readerName + " is reading data: " + data);
            Thread.sleep(1000); // Simulează timpul de citire
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            rwLock.readLock().unlock(); // Eliberează read lock
            System.out.println(readerName + " finished reading.");
        }
    }

    // Metodă pentru scriitori
    public void writeData(String writerName, String newData) {
        rwLock.writeLock().lock(); // Obține write lock
        try {
            System.out.println(writerName + " is writing data...");
            Thread.sleep(1000); // Simulează timpul de scriere
            this.data = newData;
            System.out.println(writerName + " updated data to: " + data);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            rwLock.writeLock().unlock(); // Eliberează write lock
            System.out.println(writerName + " finished writing.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        SharedResource resource = new SharedResource();

        // Cititori (readers)
        Runnable reader1 = () -> resource.readData("Reader-1");
        Runnable reader2 = () -> resource.readData("Reader-2");

        // Scriitori (writers)
        Runnable writer1 = () -> resource.writeData("Writer-1", "New Data 1");
        Runnable writer2 = () -> resource.writeData("Writer-2", "New Data 2");

        // Pornim thread-urile
        Thread t1 = new Thread(reader1);
        Thread t2 = new Thread(reader2);
        Thread t3 = new Thread(writer1);
        Thread t4 = new Thread(writer2);

        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }
}
