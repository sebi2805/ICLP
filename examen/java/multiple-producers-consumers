import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;


class PCDrop {
    List<Integer> list = new ArrayList<>();
    public synchronized void add(int num) {
        list.add(num);
        notifyAll();
    }

    public synchronized Integer get() throws InterruptedException {
        while(list.isEmpty()) {
            System.out.println("List is empty, waiting");
            wait();
        }

        return list.removeFirst();
    }
}
class Producer extends Thread {
    private final PCDrop drop;
    private final String name;

    public Producer(PCDrop drop, String name){
        this.drop = drop;
        this.name = name;
    }

    @Override
    public void run() {
        Random r = new Random();
        while (true) {
            var value = r.nextInt(1, 100);
            drop.add(value);
            System.out.println(name + " added " + value);
            try {
                Thread.sleep(r.nextInt(1000, 5000));
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
}

class Consumer extends Thread {
    private final String name;
    private final PCDrop drop;

    public Consumer(PCDrop drop, String name){
        this.drop = drop;
        this.name = name;
    }

    public void run() {
        while (true) {
            try {
                var value = drop.get();
                System.out.println(name + " consumed " + value);
                Random r = new Random();
                Thread.sleep(r.nextInt(100, 200));
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
public class Main {
    public static void main(String[] args) throws Exception {
        var drop = new PCDrop();

        Producer producer = new Producer(drop, "p1");
        Consumer consumer = new Consumer(drop, "c1");
        Consumer consumer1 = new Consumer(drop, "c2");


        producer.start();
        consumer.start();
        consumer1.start();

        producer.join();
        consumer.join();
        consumer1.join();
    }
}
